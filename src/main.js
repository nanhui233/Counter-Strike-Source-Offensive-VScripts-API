// This file contains the main JavaScript code for the web document search functionality.

const searchInput = document.getElementById('searchInput');
const resultsContainer = document.getElementById('results');
const detailContainer = document.getElementById('detail');
let functionsData = [];
let rawData = [];

const TEXT_MAP = {
    zh: {
        function: '函数',
        category: '类别',
        signature: '用法',
        description: '描述',
        notFound: '未找到相关函数',
        docTitle: 'CSSO VScript API 开发文档',
        docTip: '此文档完全由AI生成(包括翻译)<br>此想法为 <a href="https://space.bilibili.com/442052974?spm_id_from=333.1007.0.0">南方の辉</a> 提供<br>如果你需要离线文档，请点击<a href="https://github.com/nanhui233/Counter-Strike-Source-Offensive-VScripts-API/tree/main?tab=readme-ov-file">这里下载</a>',
        searchPlaceholder: '搜索函数...',
        global: '全局函数'
    },
    en: {
        function: 'Function',
        category: 'Category',
        signature: 'Usage',
        description: 'Description',
        notFound: 'No related function found',
        docTitle: 'CSSO VScript API Documentation',
        docTip: 'This documentation is fully generated by AI (including translation)<br>Idea provided by <a href="https://space.bilibili.com/442052974?spm_id_from=333.1007.0.0">南方の辉</a><br>If you need an offline version, click <a href="https://github.com/nanhui233/Counter-Strike-Source-Offensive-VScripts-API/tree/main?tab=readme-ov-file">here to download</a>',
        searchPlaceholder: 'Search function...',
        global: 'Global Functions'
    }
};

// 自动识别用户语言并设置默认语言
function getDefaultLang() {
    const lang = navigator.language || navigator.userLanguage;
    if (lang.startsWith('zh')) return 'zh';
    return 'en';
}

const langSwitch = document.getElementById('lang-switch');
let currentLang = getDefaultLang();
langSwitch.value = currentLang;

// 设置搜索框提示
searchInput.placeholder = TEXT_MAP[currentLang].searchPlaceholder;

// 初始化只加载一次数据
loadFunctions().then(data => {
    rawData = data;
    functionsData = groupByCategory(rawData);
    displayMenu(functionsData);
    setDocTip();
});

// 读取分组后的 functions.json
async function loadFunctions() {
    const response = await fetch('functions.json');
    return response.json();
}

// 展示分组菜单
function displayMenu(data, query = '') {
    resultsContainer.innerHTML = '';
    data.forEach(group => {
        // 分组标题
        const groupDiv = document.createElement('div');
        groupDiv.className = 'group';

        const groupTitle = document.createElement('div');
        groupTitle.className = 'group-title collapsible';
        groupTitle.textContent = group.category || '[未分组]';

        // 分组内容
        const groupList = document.createElement('div');
        groupList.className = 'group-list';
        groupList.style.display = 'none'; // 默认收起

        // 修复：确保 group.functions 存在且为数组
        if (Array.isArray(group.functions)) {
            group.functions
                .filter(func =>
                    !query ||
                    (func.function || '').toLowerCase().includes(query) ||
                    (func.signature || '').toLowerCase().includes(query) ||
                    (func.description || '').toLowerCase().includes(query) ||
                    (func.description_zh || '').includes(query)
                )
                .forEach(func => {
                    const item = document.createElement('div');
                    item.className = 'result-item';
                    item.textContent = func.function || '[无函数名]';
                    // 鼠标悬停时显示对应语言描述
                    item.title = currentLang === 'zh' ? func.description_zh : func.description;
                    item.onclick = () => {
                        document.querySelectorAll('.result-item').forEach(el => el.classList.remove('selected'));
                        item.classList.add('selected');
                        showDetail(func, group.category);
                    };
                    groupList.appendChild(item);
                });
        }

        // 只显示有结果的分组
        if (groupList.childNodes.length > 0) {
            // 点击分组标题展开/收起
            groupTitle.onclick = () => {
                groupTitle.classList.toggle('expanded');
                if (groupTitle.classList.contains('expanded')) {
                    groupList.style.display = "block";
                    groupList.style.maxHeight = groupList.scrollHeight + "px";
                    groupList.style.opacity = "1";
                    // 逐个动画显示
                    Array.from(groupList.children).forEach((item, idx) => {
                        item.classList.remove('animated');
                        setTimeout(() => {
                            item.classList.add('animated');
                        }, idx * 50);
                    });
                } else {
                    // 逐个动画消失，时间缩短为每个30ms
                    Array.from(groupList.children).forEach((item, idx) => {
                        setTimeout(() => {
                            item.classList.remove('animated');
                        }, idx * 30);
                    });
                    groupList.style.maxHeight = "0";
                    groupList.style.opacity = "0";
                    setTimeout(() => {
                        if (!groupTitle.classList.contains('expanded')) {
                            groupList.style.display = "none";
                        }
                    }, 400 + groupList.children.length * 1); // 动画时间+延迟
                }
            };
            groupDiv.appendChild(groupTitle);
            groupDiv.appendChild(groupList);
            resultsContainer.appendChild(groupDiv);
        }
    });
    // 没有结果时提示
    if (!resultsContainer.hasChildNodes()) {
        resultsContainer.innerHTML = `<p>${TEXT_MAP[currentLang].notFound}</p>`;
        detailContainer.innerHTML = '';
    }
}

// 展示详情（带加载动画）
function showDetail(func, category) {
    // 先为现有内容添加淡出动画
    if (detailContainer.innerHTML.trim()) {
        detailContainer.firstElementChild?.classList?.add('detail-fadeout');
        setTimeout(() => {
            showDetailLoadingAndContent(func, category);
        }, 300); // 等待淡出动画结束
    } else {
        showDetailLoadingAndContent(func, category);
    }
}

function showDetailLoadingAndContent(func, category) {
    // 显示加载动画
    detailContainer.innerHTML = `
        <div class="detail-loading">
            <div class="loading-spinner"></div>
        </div>
    `;
    setTimeout(() => {
        const t = TEXT_MAP[currentLang];
        const desc = currentLang === 'zh' ? func.description_zh : func.description;
        detailContainer.innerHTML = `
            <div class="detail-pop">
                <h2>${func.function || '[无函数名]'}</h2>
                <p><strong>${t.category}:</strong> ${category || '无'}</p>
                <p><strong>${t.signature}:</strong> ${func.signature || '无'}</p>
                <p><strong>${t.description}:</strong> ${desc || '无'}</p>
            </div>
        `;
    }, 600); // 600ms加载动画
}

// 搜索框事件
let typingBuffer = ''; // 缓存真实输入内容
let typingTimer = null;

searchInput.addEventListener('input', () => {
    // 取消上一次动画
    if (typingTimer) clearTimeout(typingTimer);

    const val = searchInput.value;

    // 立即刷新菜单，提高搜索响应速度
    const query = val.trim().toLowerCase();
    displayMenu(functionsData, query);
});

// 初始化文档说明
function setDocTip() {
    const t = TEXT_MAP[currentLang];
    detailContainer.innerHTML = `
        <h2>${t.docTitle}</h2>
        <p>${t.docTip}</p>
    `;
}

// 页面加载遮罩动画
function showLoading() {
    let loading = document.getElementById('page-loading');
    if (!loading) {
        loading = document.createElement('div');
        loading.id = 'page-loading';
        loading.innerHTML = `<div class="loading-spinner"></div>`;
        document.body.appendChild(loading);
    }
    loading.classList.add('show');
}
function hideLoading() {
    const loading = document.getElementById('page-loading');
    if (loading) {
        loading.classList.remove('show');
        setTimeout(() => loading.remove(), 500);
    }
}

// 切换语言时逻辑保持不变
langSwitch.onchange = () => {
    showLoading();
    setTimeout(() => {
        currentLang = langSwitch.value;
        searchInput.placeholder = TEXT_MAP[currentLang].searchPlaceholder;
        functionsData = groupByCategory(rawData); // 重新分组，分组名会变
        displayMenu(functionsData, searchInput.value.trim().toLowerCase());
        setDocTip();
        hideLoading();
    }, 900);
};

function groupByCategory(arr) {
    const classMap = {};
    const globalFuncs = [];
    arr.forEach(func => {
        if (func.function && func.function.includes('::')) {
            // 类方法，按类名分组
            const [className, methodName] = func.function.split('::');
            const funcObj = { ...func, function: methodName };
            if (!classMap[className]) classMap[className] = [];
            classMap[className].push(funcObj);
        } else {
            // 全局函数
            globalFuncs.push(func);
        }
    });
    // 构造分组数组
    const result = [];
    const globalCategory = TEXT_MAP[currentLang].global || (currentLang === 'zh' ? '全局函数' : 'Global Functions');
    if (globalFuncs.length > 0) {
        result.push({ category: globalCategory, functions: globalFuncs });
    }
    for (const className in classMap) {
        result.push({ category: className, functions: classMap[className] });
    }
    return result;
}

const sidebar = document.querySelector('.sidebar');
const mainContent = document.querySelector('.main-content');
const toggleBtn = document.getElementById('toggleSidebar');

toggleBtn.addEventListener('click', () => {
    sidebar.classList.toggle('hidden');
    mainContent.classList.toggle('sidebar-hidden');
});

detailContainer.innerHTML = `
        <h2>CSSO VScript API 开发文档</h2>
        <p>此文档完全由AI生成(包括翻译)<br>此想法为 <a href="https://space.bilibili.com/442052974?spm_id_from=333.1007.0.0">南方の辉</a> 提供<br>如果你需要离线文档，请点击<a href="https://github.com/nanhui233/Counter-Strike-Source-Offensive-VScripts-API/tree/main?tab=readme-ov-file">这里下载</a></p>
`;

// 爱心特效
document.addEventListener('click', function (e) {
    createHeart(e.clientX, e.clientY);
});

function createHeart(x, y) {
    const heart = document.createElement('div');
    heart.textContent = '❤️';
    heart.className = 'heart-effect';
    heart.style.left = x - 10 + 'px';
    heart.style.top = y - 10 + 'px';
    heart.style.position = 'fixed';
    heart.style.pointerEvents = 'none';
    heart.style.transition = 'transform 0.6s cubic-bezier(.17,.67,.83,.67), opacity 0.8s';

    document.body.appendChild(heart);

    // 随机方向
    const angle = Math.random() * Math.PI - Math.PI / 2; // -90°~90°
    const distance = 40 + Math.random() * 30; // 40~70px
    const dx = Math.cos(angle) * distance;
    const dy = Math.sin(angle) * distance;

    setTimeout(() => {
        heart.style.transform = `translate(${dx}px, ${dy}px) scale(1.5)`;
        heart.style.opacity = '0';
    }, 10);

    setTimeout(() => {
        heart.remove();
    }, 800);
}